#!/usr/bin/env python
#
# WAV to FLAC and/or MP3 converter
#
# Requires: flac and/or lame
#
# Copyright © 2015 Mark Karpov <markkarpov@openmailbox.org>
#
# wav2 is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# wav2 is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>.

import argparse
import os
import shutil
import subprocess
import sys

# Constants and other useful values

prog_name = os.path.basename(__file__)
version = '0.1.0'
description = 'Convert WAV files into FLAC and/or MP3 format'
license = """
wav2 — convert WAV files into FLAC and/or MP3 format.

Copyright © 2015 Mark Karpov

wav2 is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

wav2 is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
details.

You should have received a copy of the GNU General Public License along
with this program. If not, see <http://www.gnu.org/licenses/>.
"""

tricky_chars = frozenset('\x00/\\?%*:|"<>')
fair_char = '_'

parser = argparse.ArgumentParser(description=description)
parser.add_argument('files', metavar='FILE', nargs='*',
                    help='file to process')
parser.add_argument('-F', '--flac', action='store_true', dest='make_flac',
                    help='convert FILE into FLAC format')
parser.add_argument('-M', '--mp3',  action='store_true', dest='make_mp3',
                    help='convert FILE into MP3 format')
parser.add_argument('-n', '--count', action='store_true', dest='count_tracks',
                    help='count number of FILEs and write it as tag')
parser.add_argument('-i', '--indexing', action='store_true', dest='indexing',
                    help='parse numeric prefix of filenames, store it as tag')
parser.add_argument('-o', '--output', metavar='OUT', dest='out_dir', default='',
                    help='save converted files in OUT directory')
parser.add_argument('-l', '--album', metavar='S', dest='album',
                    help='write S as «album» tag')
parser.add_argument('-a', '--artist', metavar='S', dest='artist',
                    help='write S as «artist» tag')
parser.add_argument('-c', '--comment', metavar='S', dest='comment',
                    help='write S as «comment» tag')
parser.add_argument('-g', '--genre', metavar='S', dest='genre',
                    help='write S as «genre» tag')
parser.add_argument('-y', '--year', metavar='S', dest='year',
                    help='write S as «year» tag')
parser.add_argument('--license', action='store_true', dest='show_license',
                    help="show program's license and exit")
parser.add_argument('--version', action='version',
                    version='%(prog)s ' + version)

args = parser.parse_args()

# Here we describe various functions that implements all functionality of
# the program.

def failure(str):
    "Print error message ‘str’ to stderr and exit with code 1."
    print(prog_name, ": error: ", str, file=sys.stderr)
    exit(1)

def bare_name(name):
    "Return base name of ‘name’, but without extension."
    return os.path.splitext(os.path.basename(name))[0]

def split_filename(name):
    "Return tuple: index of file (parsed from prefix) and its title."
    index, title = name.split(maxsplit=1)
    return index.lstrip('0'), title

def output_name(out_dir, name, ext):
    """Join directory ‘out_dir’, base name ‘name’ and extension ‘ext’. ‘name’ is
transformed so it can be used on all major operating systems."""
    for x in tricky_chars: name = name.replace(x, fair_char)
    return os.path.join(out_dir,
                        name + os.path.extsep + ext if ext else name)

def make_flac(name):
    """Call ‘flac’ codec and tell it to translate file named ‘name’ according to
supplied arguments ‘args’."""
    cmd = ['flac', '-8', '--force']
    bname = title = bare_name(name)
    if args.indexing:
        index, title = split_filename(bname)
        cmd.extend(['-T', 'TRACKNUMBER=' + index])
    if args.count_tracks:
        cmd.extend(['-T', 'TRACKTOTAL=' + str(len(args.files))])
    cmd.extend(['-T', 'TITLE=' + title])
    if args.album: cmd.extend(['-T', 'ALBUM=' + args.album])
    if args.artist: cmd.extend(['-T', 'ARTIST=' + args.artist])
    if args.comment: cmd.extend(['-T', 'COMMENT=' + args.comment])
    if args.genre: cmd.extend(['-T', 'GENRE=' + args.genre])
    if args.year: cmd.extend(['-T', 'DATE=' + args.year])
    cmd.extend(['-o', output_name(args.out_dir, bname, 'flac')])
    cmd.append(name)
    subprocess.call(cmd)

def make_mp3(name):
    """Call ‘lame’ codec and tell it to translate file name ‘name’ according to
supplied arguments ‘args’."""
    cmd = ['lame', '-b', '320', '-h', '--add-id3v2']
    bname = title = bare_name(name)
    if args.indexing:
        index, title = split_filename(bname)
        cmd.extend(['--tn',
                    index + '/' + str(len(args.files))
                    if args.count_tracks else index])
    cmd.extend(['--tt', title])
    if args.album: cmd.extend(['--tl', args.album])
    if args.artist: cmd.extend(['--ta', args.artist])
    if args.comment: cmd.extend(['--tc', args.comment])
    if args.genre: cmd.extend(['--tg', args.genre])
    if args.year: cmd.extend(['--ty', args.year])
    cmd.append(name)
    cmd.append(output_name(args.out_dir, bname, 'mp3'))
    subprocess.call(cmd)

# Execution starts here, show license if user wants to see it.

if args.show_license: print(license)

# It's better to check if required tools are present and print user-friendly
# error messages.

if args.make_flac and not shutil.which('flac'):
    failure('cannot find ‘flac’ program')

if args.make_mp3 and not shutil.which('lame'):
    failure('cannot find ‘lame’ program')

# If user has specified output directory, we should make sure that it does
# exist.

if args.out_dir: os.makedirs(args.out_dir, exist_ok=True)

# Traverse list of positional (free) arguments and perform conversion.

for f in args.files:
    if args.make_flac: make_flac(f)
    if args.make_mp3: make_mp3(f)
